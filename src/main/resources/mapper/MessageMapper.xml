<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nju.community.dao.MessageMapper">

    <sql id="selectFields">
        id, from_id, to_id, conversation_id, content, status, create_time
    </sql>

    <sql id="insertFields">
        from_id, to_id, conversation_id, content, status, create_time
    </sql>

    <insert id="insertMessage" parameterType="Message" keyProperty="id">
        insert into message (<include refid="insertFields"></include>)
        values (#{fromId},#{toId},#{conversationId},#{content},#{status},#{createTime})
    </insert>

<!--    foreach的意思是，从ids list中遍历，每次的数据叫item，以(开始，)结束，中间，拼接，拼接内容为#{id}-->
    <update id="updateStatus">
        update message set status = #{status}
        where id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

    <!--    查询当前用户的会话列表，针对每个会话只返回一条最新的私信，多个conversation_id一样的私信，只显示时间最近的那一条也就是id最大的-->
    <select id="selectConversations" resultType="com.nju.community.entity.Message">
        select <include refid="selectFields"></include>
        from message
        where id in(
            select max(id)
            from message
            where status != 2
            and from_id !=1
            and (from_id=#{userId} or to_id=#{userId})
            group by conversation_id
        )
        order by id desc
        limit #{offset},#{limit}
    </select>

    <select id="selectConversationCount" resultType="java.lang.Integer">
         select count(distinct conversation_id)
         from message
             where status != 2
             and from_id !=1
             and (from_id=#{userId} or to_id=#{userId})
    </select>

<!--    作者的复杂写法-->
    <select id="selectConversationCount1" resultType="java.lang.Integer">
        select count(m.maxid)
        from(
            select max(id) as maxid from message
            where status != 2
            and from_id !=1
            and (from_id=#{userId} or to_id=#{userId})
            group by conversation_id
            )as m
    </select>

    <select id="selectLetters" resultType="com.nju.community.entity.Message">
        select <include refid="selectFields"></include>
        from message
        where status != 2
        and from_id !=1
        and conversation_id=#{conversationId}
        order by id desc
        limit #{offset},#{limit}
    </select>

    <select id="selectLetterCount" resultType="java.lang.Integer">
        select count(*)
        from message
        where status != 2
        and from_id != 1
        and conversation_id = #{conversationId}
    </select>

    <select id="selectLetterUnreadCount" resultType="java.lang.Integer">
        select count(*)
        from message
        where status = 0
        and from_id != 1
        and to_id = #{userId}
        <if test="conversationId!=null">
            and conversation_id = #{conversationId}
        </if>
    </select>

</mapper>
